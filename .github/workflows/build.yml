# GitHub Action to cross compile a YIO Remote Qt project for the YIO remote-os.
# Uses the pre-built Buildroot SDK from remote-os in a custom GitHub action.
# Creates a pre-release if pushed on master branch without a version tag.
# Creates a release if pushed on master branch with a version tag.
---
  name: "Cross Compile & Release"
    
  on:
    push:
    pull_request:

  env:
    APP_NAME: YIO-remote-software
    APP_ARCHITECTURE: RPi0
    PROJECT_NAME: remote-software
    HASH_FILENAME: yio-remote-software.hash

  jobs:
    build:
      name: ${{ matrix.config.name }}
      runs-on: ubuntu-latest
      strategy:
        matrix:
          config:
          - {
              name: "remote-os v1.x Build", artifact: "RPi0-release",
              qmake-args: "CONFIG+=release",
              build-image: "zehnm/yio-crosscompile-action:2.0.0"
            }
  
      steps:
        - name: github env vars
          run: |
            echo "$GITHUB_REF"
            echo "$GITHUB_HEAD_REF"
            echo "$GITHUB_BASE_REF"
  
        - name: Checkout ${{ env.PROJECT_NAME}}
          uses: actions/checkout@v2
          with:
            # History of 500 should be more than enough to calculate commit count since last release tag.
            fetch-depth: 500
            path: ${{ env.PROJECT_NAME}}

        - name: Fetch all tags to determine version
          run: |
            cd ${{ env.PROJECT_NAME}}
            git fetch origin +refs/tags/*:refs/tags/*
            git describe --match "v[0-9]*" --tags HEAD --always
  
        - name: Set build timestamp
          run: echo "::set-env name=TIMESTAMP::$(date +"%Y%m%d_%H%M%S")"
  
        # - name: Cross compile
        #   id: cross-compile
        #   uses: zehnm/yio-crosscompile-action@2.0.0
        #   with:
        #     project-name: ${{ env.PROJECT_NAME }}
        #     output-path: ${GITHUB_WORKSPACE}/binaries/app
        #     qmake-args: ${{ matrix.config.qmake-args }}

        # Unfortunately we can't use a dynamic Action as in "uses: ${{ matrix.config.build-image }}" 
        # So let's try doing it manually :-( Maybe one day we'll get that feature from GitHub
        - name: Cross compile
          run: |
              docker pull ${{ matrix.config.build-image }}
              docker run --workdir /github/workspace --rm -e APP_NAME -e APP_ARCHITECTURE -e PROJECT_NAME -e HASH_FILENAME -e TIMESTAMP -e INPUT_PROJECT-NAME -e INPUT_OUTPUT-PATH -e INPUT_QMAKE-ARGS -e INPUT_INTG-LIB-REPO -e INPUT_VERSION-FILE-DIR -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e GITHUB_PATH -e GITHUB_ENV -e RUNNER_OS -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -v "/var/run/docker.sock":"/var/run/docker.sock" -v "/home/runner/work/_temp/_github_home":"/github/home" -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" -v "/home/runner/work/remote-software/remote-software":"/github/workspace" ${{ matrix.config.build-image }}  "remote-software" "${GITHUB_WORKSPACE}/binaries/app" "CONFIG+=release" "https://github.com/YIO-Remote/integrations.library.git" "."

        - name: Upload build artefacts
          uses: actions/upload-artifact@v1
          with:
            path: binaries
            name: ${{ env.APP_NAME }}-${{ matrix.config.artifact }}

    release:
      name: Create Release
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'tags/v')
      runs-on: ubuntu-latest
      needs: build

      steps:
        - run: mkdir release debug
        - name: Download release artifact
          uses: actions/download-artifact@v1
          with:
            name: ${{ env.APP_NAME }}-${{ env.APP_ARCHITECTURE }}-release
            path: ./release
        #- name: Download debug artifact
        #  uses: actions/download-artifact@v1
        #  with:
        #    name: ${{ env.APP_NAME }}-${{ env.APP_ARCHITECTURE }}-debug
        #    path: ./debug
        - name: Get artifact version
          run: |
            read -r APP_VERSION < release/version.txt
            echo "::set-env name=APP_VERSION::$APP_VERSION"
            echo "::set-env name=TIMESTAMP::$(date +"%Y%m%d_%H%M%S")"

        - name: Create GitHub development build archives
          if: "!contains(github.ref, 'tags/v')"
          run: |
            # tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.TIMESTAMP }}-${{ env.APP_ARCHITECTURE }}-debug.tar -C debug .
            tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.TIMESTAMP }}-${{ env.APP_ARCHITECTURE }}-release.tar -C release .
            for filename in *.tar; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

        - name: Create Pre-Release ${{ env.APP_VERSION }}
          uses: "marvinpinto/action-automatic-releases@latest"
          if: "!contains(github.ref, 'tags/v')"
          with:
            repo_token: "${{ secrets.GITHUB_TOKEN }}"
            automatic_release_tag: "latest"
            prerelease: true
            title: "Development Build ${{ env.APP_VERSION }}"
            files: |
                *.tar
                ${{ env.HASH_FILENAME }}

        - name: Create GitHub release archives
          if: "contains(github.ref, 'tags/v')"
          run: |
            # tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.APP_ARCHITECTURE }}-debug.tar -C debug .
            tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.APP_ARCHITECTURE }}-release.tar -C release .
            for filename in *.tar; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

        - name: Create Release ${{ env.APP_VERSION }}
          uses: "marvinpinto/action-automatic-releases@latest"
          if: "contains(github.ref, 'tags/v')"
          with:
            repo_token: "${{ secrets.GITHUB_TOKEN }}"
            prerelease: false
            files: |
              *.tar
              ${{ env.HASH_FILENAME }}
